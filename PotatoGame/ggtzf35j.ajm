#if !defined(PG_MESH_INSTANCE_H)
#define PG_MESH_INSTANCE_H


#include "stdafx.h"

#include "PGCore.h"
#include "PGLinkedList.h"
#include "PGShaderSources.h"
#include "PGMesh.h"
#include "PGFont.h"

using namespace PGEngine;

namespace PGGame {
	class PGAxisMesh :public PGMesh {
		private:
			GLuint Unif_Translate;
			GLuint Unif_Frag_Color;
		public:
			PGAxisMesh() :
				PGMesh(new PGShader(axis_vertex_shader, FragShaderColor4fIn)) {
			}
			~PGAxisMesh() {

			}
			void PGAxisMesh::Render(v3 possition, v4 color) {
				this->Shader->Use();
				glUniformMatrix4fv(this->Unif_Translate, 1, GL_FALSE, &glm::translate(m4(1.f), possition)[0][0]);
				glBindVertexArray(this->VAO);
				glDrawArrays(GL_LINES, 0, 6);

			}
			void PGAxisMesh::Build() {

			Shader->Use();
			// .:: Bind UBO ::. 
			glUniformBlockBinding(
				this->Shader->ShaderID,
				glGetUniformBlockIndex(this->Shader->ShaderID, "Renderer_UBO"),
				1
				);
			// .:: Get Uniform reference ::.
			this->Unif_Translate = glGetUniformLocation(this->Shader->ShaderID, "Translate");
			glBindVertexArray(this->VAO);
			// 2. Copy our vertices array in a vertex buffer for OpenGL to use
			glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
			glBufferData(
				GL_ARRAY_BUFFER,
				sizeof(axes_vertex_data),
				axes_vertex_data,
				GL_STATIC_DRAW
				);
			// 3.  Vertex possition attributes pointers
			glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 2 * sizeof(v4), (GLvoid*)0);
			glEnableVertexAttribArray(0);
			glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, 2 * sizeof(v4), (GLvoid*)(4 * sizeof(GLfloat)));
			glEnableVertexAttribArray(1);

			glBindVertexArray(0);
		}
	};

	class PGSquareMesh :public PGMesh {
		private:
			GLuint Unif_Translate;
			GLuint Unif_Scale;
			GLuint Unif_Frag_Color;
		public:
			PGSquareMesh() :
				PGMesh(new PGShader(simple_vertex_shader, FragShaderColor4fUnif)) {
				this->Unif_Scale = 0;
				this->Unif_Translate = 0;
			}
			~PGSquareMesh() {

			}
			void PGSquareMesh::Render(v3 possition, v2 size, v4 color) {
				this->Shader->Use();
				glUniformMatrix4fv(this->Unif_Translate, 1, GL_FALSE, &glm::translate(m4(1.f), possition)[0][0]);
				glUniformMatrix4fv(this->Unif_Scale, 1, GL_FALSE, &glm::scale(m4(1.f), v3(size, 1.0f))[0][0]);
				glUniform4fv(this->Unif_Frag_Color, 1, &color[0]);
				glBindVertexArray(this->VAO);
				glDrawArrays(GL_TRIANGLES, 0, 6);

			}
			void PGSquareMesh::Build() {

			Shader->Use();
			// .:: Bind UBO ::. 
			glUniformBlockBinding(
				this->Shader->ShaderID,
				glGetUniformBlockIndex(this->Shader->ShaderID, "Renderer_UBO"),
				1
				);
			// .:: Get Uniform reference ::.
			this->Unif_Translate = glGetUniformLocation(this->Shader->ShaderID, "Translate");
			this->Unif_Scale = glGetUniformLocation(this->Shader->ShaderID, "Scale");
			this->Unif_Frag_Color = glGetUniformLocation(this->Shader->ShaderID, "FragColor");
			glBindVertexArray(this->VAO);
			// 2. Copy our vertices array in a vertex buffer for OpenGL to use
			glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
			glBufferData(
				GL_ARRAY_BUFFER,
				sizeof(square_vertex_data),
				square_vertex_data,
				GL_STATIC_DRAW
				);
			// 3.  Vertex possition attributes pointers
			glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, sizeof(v4), (GLvoid*)0);
			glEnableVertexAttribArray(0);
			glBindVertexArray(0);
		}
	};
	class PGCubeMesh :public PGMesh {
		private:
			GLuint Unif_Translate;
			GLuint Unif_Scale;
			GLuint Unif_Frag_Color;
		public:
			PGCubeMesh() :
				PGMesh(new PGShader(simple_vertex_shader, FragShaderColor4fUnif)) {
				this->Unif_Scale = 0;
				this->Unif_Translate = 0;
			}
			~PGCubeMesh() {

			}
			void PGCubeMesh::Render(v3 possition, v3 size, v4 color) {
				this->Shader->Use();
				glUniformMatrix4fv(this->Unif_Translate, 1, GL_FALSE, &glm::translate(m4(1.f), possition)[0][0]);
				glUniformMatrix4fv(this->Unif_Scale, 1, GL_FALSE, &glm::scale(m4(1.f), size)[0][0]);
				glUniform4fv(this->Unif_Frag_Color, 1, &color[0]);
				glBindVertexArray(this->VAO);
				glDrawArrays(GL_TRIANGLES, 0, 36);

			}
			void PGCubeMesh::Build() {


				// .:: Bind UBO ::. 
				glUniformBlockBinding(
					this->Shader->ShaderID,
					glGetUniformBlockIndex(this->Shader->ShaderID, "Renderer_UBO"),
					1
					);
				// .:: Get Uniform reference ::.
				this->Unif_Translate = glGetUniformLocation(this->Shader->ShaderID, "Translate");
				this->Unif_Scale = glGetUniformLocation(this->Shader->ShaderID, "Scale");
				this->Unif_Frag_Color = glGetUniformLocation(this->Shader->ShaderID, "FragColor");
				glBindVertexArray(this->VAO);
				// 2. Copy our vertices array in a vertex buffer for OpenGL to use
				glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
				glBufferData(
					GL_ARRAY_BUFFER,
					sizeof(cube_vertex_data2),
					cube_vertex_data2,
					GL_STATIC_DRAW
					);
				// 3.  Vertex possition attributes pointers
				glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, sizeof(v4), (GLvoid*)0);
				glEnableVertexAttribArray(0);
				glBindVertexArray(0);
			}
		};

	class PGLightedCubeMesh :public PGMesh {
		private:
			GLuint Unif_Translate;
			GLuint Unif_Scale;
			GLuint Unif_Object_Color;
			GLuint Unif_Light_Color;
		public:
			PGLightedCubeMesh() :
				PGMesh(new PGShader(light_vertex_shader, FragShaderBasicLight)) {


			}
			~PGLightedCubeMesh() {

			}
			void PGLightedCubeMesh::Render(v3 possition, v3 size, v4 color) {
				this->Shader->Use();
				glUniformMatrix4fv(this->Unif_Translate, 1, GL_FALSE, &glm::translate(m4(1.f), possition)[0][0]);
				glUniformMatrix4fv(this->Unif_Scale, 1, GL_FALSE, &glm::scale(m4(1.f), size)[0][0]);
				glUniform4fv(this->Unif_Object_Color, 1, &color[0]);
				glUniform3fv(this->Unif_Light_Color, 1, &v3(1.f, 1.f, 1.f)[0]);
				glBindVertexArray(this->VAO);
				glDrawArrays(GL_TRIANGLES, 0, 12 * 3);

			}
			void PGLightedCubeMesh::Build() {
				PGBuildableObject::StartBuilding();

					glUniformBlockBinding(this->Shader->ShaderID, glGetUniformBlockIndex(this->Shader->ShaderID, "Renderer_UBO"), 1);

					this->Unif_Translate = glGetUniformLocation(this->Shader->ShaderID, "Translate");
					this->Unif_Scale = glGetUniformLocation(this->Shader->ShaderID, "Scale");
					this->Unif_Object_Color = glGetUniformLocation(this->Shader->ShaderID, "ObjectColor");
					this->Unif_Light_Color = glGetUniformLocation(this->Shader->ShaderID, "LightColor");

					glBindVertexArray(this->VAO);
					glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
					glBufferData(GL_ARRAY_BUFFER,sizeof(cube_vertex_normal),cube_vertex_normal,	GL_STATIC_DRAW);
					

					glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, sizeof(v4)+sizeof(v3), (GLvoid*)0);
					glEnableVertexAttribArray(0);
					glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(v4)+sizeof(v3), (GLvoid*)(sizeof(v4)));
					glEnableVertexAttribArray(1);
					glBindVertexArray(0);

				PGBuildableObject::EndBuilding();
			}
		};
	class PGLightedHexagoneMesh :public PGMesh {
	private:
		GLuint Unif_Translate;
		GLuint Unif_Scale;
		GLuint Unif_Object_Color;
		GLuint Unif_Light_Color;
	public:
		PGLightedHexagoneMesh() :
			PGMesh(new PGShader(light_vertex_shader, FragShaderBasicLight)) {
		}
		~PGLightedHexagoneMesh() {
		}
		void PGLightedHexagoneMesh::Render(v3 possition, v3 size, v4 color) {
			this->Shader->Use();
				glUniformMatrix4fv(this->Unif_Translate, 1, GL_FALSE, &glm::translate(m4(1.f), possition)[0][0]);
				glUniformMatrix4fv(this->Unif_Scale, 1, GL_FALSE, &glm::scale(m4(1.f), size)[0][0]);
				glUniform4fv(this->Unif_Object_Color, 1, &color[0]);
				glUniform3fv(this->Unif_Light_Color, 1, &v3(1.f, 1.f, 1.f)[0]);
			glBindVertexArray(this->VAO);
			
			glDrawArrays(GL_TRIANGLES, 0, 60);
		}
		void PGLightedHexagoneMesh::Build() {
			PGBuildableObject::StartBuilding();
			int face_count = 20;
			int vertex_per_face = 3;

			glUniformBlockBinding(this->Shader->ShaderID, glGetUniformBlockIndex(this->Shader->ShaderID, "Renderer_UBO"), 1);

			this->Unif_Translate = glGetUniformLocation(this->Shader->ShaderID, "Translate");
			this->Unif_Scale = glGetUniformLocation(this->Shader->ShaderID, "Scale");
			this->Unif_Object_Color = glGetUniformLocation(this->Shader->ShaderID, "ObjectColor");
			this->Unif_Light_Color = glGetUniformLocation(this->Shader->ShaderID, "LightColor");

			glBindVertexArray(this->VAO);
			
			glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
				glBufferData(GL_ARRAY_BUFFER, (sizeof(v4)+sizeof(v3))*60, nullptr, GL_DYNAMIC_DRAW);
				
				glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
				
				int buffer_offet = 0;
				int EBO_index = 0;
				for (int i = 0; i < face_count; i++) {
					//Retrive the 3 surface's point
					v3 p1 =(v3)hexagone_vertex_data[hexagone_indice_data[EBO_index] * sizeof(v3)];
					v3 p2 = (v3)hexagone_vertex_data[hexagone_indice_data[EBO_index + 1] * sizeof(v3)];
					v3 p3 = (v3)hexagone_vertex_data[hexagone_indice_data[EBO_index + 2] * sizeof(v3)];
					//Calculate normal with the 3 point
					v3 face_normal = v3(1.f);
					for (int c = 0; c < vertex_per_face; c++) {
						glBufferSubData(GL_ARRAY_BUFFER, buffer_offet, sizeof(v3), &hexagone_vertex_data[hexagone_indice_data[EBO_index] * sizeof(v3)]);
						glBufferSubData(GL_ARRAY_BUFFER, buffer_offet,sizeof(v3),&face_normal);
						EBO_index += 1;
					}

					EBO_index += 3;
				}
				//Todo(Marc): Fill the VBO buffer with the needed data

				


				//

			glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, sizeof(v4)+sizeof(v3), (GLvoid*)0);
			glEnableVertexAttribArray(0);
			glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(v4)+sizeof(v3), (GLvoid*)(sizeof(v4)));
			glEnableVertexAttribArray(1);
			glBindVertexArray(0);

			PGBuildableObject::EndBuilding();
		}
	};
	class PGSolidHexagoneMesh :public PGMesh {
		private:
			GLuint EBO;
			GLuint Unif_Translate;
			GLuint Unif_Scale;
			GLuint Unif_Color;
		public:
			PGSolidHexagoneMesh() :
				PGMesh(new PGShader(hexagone_vertex_shader, FragShaderColor4fUnif)) {
				glGenBuffers(1, &this->EBO);
			}
			~PGSolidHexagoneMesh() {
				glDeleteBuffers(1, &this->EBO);
			}
		void PGSolidHexagoneMesh::Render(v3 possition, v3 size, v4 color) {
			if (this->PGMesh::IsBuild() == true) {
				this->Shader->Use();
				glBindVertexArray(this->VAO);

				glUniformMatrix4fv(this->Unif_Translate, 1, GL_FALSE, &glm::translate(m4(1.f), possition)[0][0]);
				glUniformMatrix4fv(this->Unif_Scale, 1, GL_FALSE, &glm::scale(m4(1.f), size)[0][0]);
				glUniform4fv(this->Unif_Color, 1, &color[0]);

				glDrawElements(GL_TRIANGLES, 60 , GL_UNSIGNED_INT, 0);
			}
		}
		void PGSolidHexagoneMesh::Build() {
			PGBuildableObject::StartBuilding();

			glUniformBlockBinding(this->Shader->ShaderID, glGetUniformBlockIndex(this->Shader->ShaderID, "Renderer_UBO"), 1);

			this->Unif_Translate = glGetUniformLocation(this->Shader->ShaderID, "Translate");
			this->Unif_Scale = glGetUniformLocation(this->Shader->ShaderID, "Scale");
			this->Unif_Color = glGetUniformLocation(this->Shader->ShaderID, "FragColor");

			glBindVertexArray(this->VAO);
			
			glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
				glBufferData(GL_ARRAY_BUFFER, sizeof(hexagone_vertex_data), hexagone_vertex_data, GL_STATIC_DRAW);

			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, this->EBO);
				glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(hexagone_indice_data), hexagone_indice_data, GL_STATIC_DRAW);


			glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(v3), (GLvoid*)0);
			glEnableVertexAttribArray(0);
			glBindVertexArray(0);

			PGBuildableObject::EndBuilding();
		}
	};
	class PGUIPanelMesh :public PGMesh {
		private:
			GLuint EBO;
			GLuint Unif_Translate;
			GLuint Unif_Scale;
			GLuint Unif_Color;
		public:
			PGUIPanelMesh() :
				PGMesh(new PGShader(ui_panel_vertex_shader, FragShaderColor4fUnif)) {
				glGenBuffers(1, &this->EBO);
			
			}
			~PGUIPanelMesh() {
				glDeleteBuffers(1, &this->EBO);
			}
			void PGUIPanelMesh::Render(v3 possition,v2 size,v4 color) {
				if (this->PGMesh::IsBuild() == true) {
					this->Shader->Use();
					glBindVertexArray(this->VAO);

					glUniformMatrix4fv(this->Unif_Translate, 1, GL_FALSE, &glm::translate(m4(1.f), possition)[0][0]);
					glUniformMatrix4fv(this->Unif_Scale, 1, GL_FALSE, &glm::scale(m4(1.f), v3(size,0.f))[0][0]);
					glUniform4fv(this->Unif_Color, 1, &color[0]);

					glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
				}
			}
			void PGUIPanelMesh::Build() {
				PGBuildableObject::StartBuilding();
				// .:: Bind UBO ::. 
				glUniformBlockBinding(this->Shader->ShaderID, glGetUniformBlockIndex(this->Shader->ShaderID, "Renderer_UBO"), 1);

				this->Unif_Translate = glGetUniformLocation(this->Shader->ShaderID, "Translate");
				this->Unif_Scale = glGetUniformLocation(this->Shader->ShaderID, "Scale");
				this->Unif_Color = glGetUniformLocation(this->Shader->ShaderID, "FragColor");

				glBindVertexArray(this->VAO);
					glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
					glBufferData(GL_ARRAY_BUFFER, sizeof(panel_vertices), panel_vertices, GL_STATIC_DRAW);

					glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, this->EBO);
					glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(panel_indices), panel_indices, GL_STATIC_DRAW);
			

				glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(v3), (GLvoid*)0);
				glEnableVertexAttribArray(0);
				glBindVertexArray(0);

				PGBuildableObject::EndBuilding();
			}
	};

	class PGTextMesh :public PGMesh {
		private:
			GLuint EBO;
			GLuint Unif_Translate;
			GLuint Unif_Scale;
			GLuint Unif_Text_Color;
		public:
			PGTextMesh() :
				PGMesh(new PGShader(text_vertex_shader, text_fragment_shader)) {
				glGenBuffers(1, &this->EBO);
			}
			~PGTextMesh() {
				glDeleteBuffers(1, &this->EBO);
			}
			void PGTextMesh::Render(char *text_string, v3 possition, v4 color, r32 scale, PGFont *font) {
				if (this->PGMesh::IsBuild() == true) {
					this->Shader->Use();
					glBindVertexArray(this->VAO);
					glUniform4fv(this->Unif_Text_Color, 1, &color[0]);


					for (char *current_char = text_string; *current_char != '\n'; current_char++) {
						PGCharacter * ch = &font->CharacterCollection[*current_char];
						glBindTexture(GL_TEXTURE_2D, ch->TextureID);

						GLfloat xpos = possition.x + (ch->Bearing.x + ch->Size.x / 2.f) * scale;
						GLfloat ypos = possition.y + (ch->Bearing.y - ch->Size.y / 2.f) * scale;

						GLfloat w = ch->Size.x * scale;
						GLfloat h = ch->Size.y * scale;

						//Push uniform
						glUniformMatrix4fv(this->Unif_Translate, 1, GL_FALSE, &glm::translate(m4(1.f), v3(xpos, ypos, possition.z))[0][0]);
						glUniformMatrix4fv(this->Unif_Scale, 1, GL_FALSE, &glm::scale(m4(1.f), v3(w, h, 1.0f))[0][0]);

						glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

						possition.x += (ch->Advance >> 6) * scale;
					}

					glBindVertexArray(0);
					glBindTexture(GL_TEXTURE_2D, 0);
				}
			}
			void  PGTextMesh::Build() override {
				PGBuildableObject::StartBuilding();


				glUniformBlockBinding(this->Shader->ShaderID, glGetUniformBlockIndex(this->Shader->ShaderID, "Renderer_UBO"), 1);


				this->Unif_Translate = glGetUniformLocation(this->Shader->ShaderID, "Translate");
				this->Unif_Scale = glGetUniformLocation(this->Shader->ShaderID, "Scale");
				this->Unif_Text_Color = glGetUniformLocation(this->Shader->ShaderID, "TextColor");


				glBindVertexArray(this->VAO);
				glBindBuffer(GL_ARRAY_BUFFER, this->VBO);
				glBufferData(GL_ARRAY_BUFFER, sizeof(text_vertices_rev), text_vertices_rev, GL_STATIC_DRAW);

				glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, this->EBO);
				glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(text_quad_indices), text_quad_indices, GL_STATIC_DRAW);

				glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(GLfloat), (GLvoid*)0);
				glEnableVertexAttribArray(0);

				glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
				glEnableVertexAttribArray(1);

				PGBuildableObject::EndBuilding();
			}
		};
}
#endif